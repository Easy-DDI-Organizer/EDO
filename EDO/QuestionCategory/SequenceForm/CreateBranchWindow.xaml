<Window x:Class="EDO.QuestionCategory.SequenceForm.CreateBranchWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="{Loc Key= Branch}" Height="600" Width="600" WindowStartupLocation="CenterOwner">
    <Window.Resources>
        <Style TargetType="TextBox">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="True">
                            <TextBlock DockPanel.Dock="Right" Foreground="Red" FontSize="14" FontWeight="Bold">*</TextBlock>
                            <Border BorderBrush="Red" BorderThickness="2">
                                <AdornedElementPlaceholder Name="adornerPlaceholder"></AdornedElementPlaceholder>
                            </Border>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="ComboBox">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="True">
                            <TextBlock DockPanel.Dock="Right" Foreground="Red" FontSize="14" FontWeight="Bold">*</TextBlock>
                            <Border BorderBrush="Red" BorderThickness="2">
                                <AdornedElementPlaceholder Name="adornerPlaceholder"></AdornedElementPlaceholder>
                            </Border>
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!-- 条件 DataContext=CondVM -->
        <DataTemplate x:Key="CondTemplate">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto">                        
                    </ColumnDefinition>
                    <ColumnDefinition Width="50">
                    </ColumnDefinition>
                    <ColumnDefinition Width="*">
                    </ColumnDefinition>
                    <ColumnDefinition Width="70">
                    </ColumnDefinition>
                </Grid.ColumnDefinitions>
                <!-- 質問項目の選択肢 -->
                <ComboBox Grid.Column="0" Margin="4" ItemsSource="{Binding QuestionConstructs}" 
                          DisplayMemberPath="No" 
                          SelectedValuePath="No"
                          IsEditable="True"
                          Width="70"
                          Text="{Binding SelectedQuestionConstructNo, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"
                />
                <!-- 記号 -->
                <ComboBox Grid.Column="1" Margin="4" ItemsSource="{Binding Operators}" DisplayMemberPath="Label" 
                          SelectedValuePath="Code" SelectedValue="{Binding SelectedOperatorCode, ValidatesOnDataErrors=True}"
                          />
                <!-- 値 -->
                <TextBox Grid.Column="2" Margin="4" Text="{Binding CondValue, ValidatesOnDataErrors=True}"/>
                <!-- ボタンなど -->
                <StackPanel Grid.Column="3" Orientation="Horizontal">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Width="48">
                        <Button Grid.Column="0" Margin="0,0,0,0" Style="{StaticResource Flat}" 
                            Command="{Binding UpCondCommand}"
                            Visibility="{Binding CanUpCond, Converter={StaticResource TrueToVisibleConverter}}"
                            HorizontalAlignment="Left"
                                >
                            <Image Source="{StaticResource SmallUpIcon}" Stretch="None"/>
                        </Button>
                        <Button Grid.Column="0" Margin="0,0,0,0" Style="{StaticResource Flat}" 
                            Command="{Binding DownCondCommand}"
                            Visibility="{Binding CanDownCond, Converter={StaticResource TrueToVisibleConverter}}"
                            HorizontalAlignment="Right"
                                >
                            <Image Source="{StaticResource SmallDownIcon}" Stretch="None"/>
                        </Button>
                    </StackPanel>
                    <Button Grid.Column="0" HorizontalAlignment="Right" Width="22" Margin="0,0,0,0" Style="{StaticResource Flat}" 
                            Command="{Binding RemoveCondCommand}"
                            Visibility="{Binding CanRemoveCond, Converter={StaticResource TrueToVisibleConverter}}"
                            ToolTip="{Loc Key= DeleteCondition}"
                            >
                        <Image Source="{StaticResource SmallDeleteIcon}" Stretch="None"/>
                    </Button>
                </StackPanel>
                <Button Grid.Row="1" Grid.Column="3"  Width="22" Margin="0,0,0,0" Style="{StaticResource Flat}"
                        HorizontalAlignment="Right"
                        Command="{Binding AddCondCommand}"
                        Visibility="{Binding CanAddCond, Converter={StaticResource TrueToVisibleConverter}}"
                        ToolTip="{Loc Key= AddOrCondition}"
                        >                    
                    <Image Source="{StaticResource SmallAddIcon}" Stretch="None"/>
                </Button>
            </Grid>
        </DataTemplate>
        <!-- 条件グループ DataContext=CondGroupVM -->
        <DataTemplate x:Key="CondGroupTemplate">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <!-- 条件グループ削除ボタン -->
                <Button Grid.Column="0" Margin="4,0,0,0" Style="{StaticResource Flat}" 
                        Visibility="{Binding CanRemoveCondGroup, Converter={StaticResource TrueToVisibleConverter}}"
                        Command="{Binding RemoveCondGroupCommand}"
                        ToolTip="{Loc Key= DeleteConditionGroup}"
                        >
                    <Image Source="{StaticResource SmallDeleteIcon}" Stretch="None"/>
                </Button>
                <!-- 条件グループ本体 DataContext=CondGroup -->
                <StackPanel Grid.Column="1" >
                    <StackPanel Orientation="Horizontal" 
                                Visibility="{Binding IsFirst, Converter={StaticResource FalseToVisibleConverter}}">
                        <!-- 条件の結合式(AND/OR) -->
                        <ComboBox Margin="4,0,0,0" Width="50" ItemsSource="{Binding Connections}"                                   
                                  DisplayMemberPath="Label" 
                                  SelectedValuePath="Code" 
                                  SelectedValue="{Binding SelectedConnectionCode}"
                                  HorizontalAlignment="Left"
                          />
                        <!-- 条件の移動 -->
                        <Button Grid.Column="0" Margin="4,0,0,0" Style="{StaticResource Flat}" 
                            Command="{Binding UpCondGroupCommand}"
                            Visibility="{Binding CanUpCondGroup, Converter={StaticResource TrueToVisibleConverter}}"
                            ToolTip="{Loc Key= UpConditionGroup}"
                                >
                            <Image Source="{StaticResource SmallUpIcon}" Stretch="None"/>
                        </Button>
                        <Button Grid.Column="0" Margin="0,0,0,0" Style="{StaticResource Flat}" 
                            Command="{Binding DownCondGroupCommand}"
                            Visibility="{Binding CanDownCondGroup, Converter={StaticResource TrueToVisibleConverter}}"
                            ToolTip="{Loc Key= DownConditionGroup}"
                                >                            
                            <Image Source="{StaticResource SmallDownIcon}" Stretch="None"/>
                        </Button>
                    </StackPanel>
                    <!-- 条件群 -->
                    <ItemsControl Margin="24,4,0,0" ItemsSource="{Binding Conds}" ItemTemplate="{StaticResource CondTemplate}"/>
                </StackPanel>
                <!-- 条件グループ追加ボタン -->
                <Button Grid.Row="1" Grid.Column="0" Margin="4,0,0,0" Style="{StaticResource Flat}"
                        Command="{Binding AddCondGroupCommand}"
                        Visibility="{Binding IsLast, Converter={StaticResource TrueToVisibleConverter}}"
                        ToolTip="{Loc Key= AddAndOrConditionGroup}"
                        >
                    <Image Source="{StaticResource SmallAddIcon}" Stretch="None"/>
                </Button>
            </Grid>            
        </DataTemplate>
        <!-- 分岐1つごと DataContext=BranchVM -->
        <DataTemplate x:Key="BranchTemplate">
            <Border BorderThickness="1,1,1,1" BorderBrush="LightGray" Margin="0,-1,0,0" Padding="0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="30"/>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <!-- 分岐削除ボタン -->
                    <Button Grid.Column="0" Margin="4" Style="{StaticResource Flat}" 
                            Visibility="{Binding CanRemoveBranch, Converter={StaticResource TrueToVisibleConverter}}"
                            Command="{Binding RemoveBranchCommand}"
                            ToolTip="{Loc Key= DeleteBranch}"
                            >
                        <Image Source="{StaticResource SmallDeleteIcon}" Stretch="None"/>
                    </Button>
                    <!-- 分岐の文字列表現 -->
                    <TextBlock Grid.Column="1" Margin="4" VerticalAlignment="Center" Text="{Binding Expression}"></TextBlock>
                    <!-- 分岐の編集ボタン -->
                    <Button Grid.Column="2" Margin="4" Style="{StaticResource Flat}" Command="{Binding EditBranchCommand}" ToolTip="{Loc Key= EditBranch}"
                            >
                        <Image Source="{StaticResource SmallEditIcon}" Stretch="None"/>
                    </Button>
                    <!-- 分岐追加ボタン -->
                    <Button Grid.Row="1" Grid.Column="0" Margin="4" Style="{StaticResource Flat}" 
                            Visibility="{Binding CanAddBranch, Converter={StaticResource booleanToVisibilityConverter}}"
                            Command="{Binding AddBranchCommand}"
                            ToolTip="{Loc Key= AppendBranch}"
                            >
                        <Image Source="{StaticResource SmallAddIcon}" Stretch="None"/>
                    </Button>
                </Grid>
            </Border>
        </DataTemplate>
    </Window.Resources>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <StackPanel Grid.Row="0">
            <TextBlock Text="{Loc Key= BranchSetting}"></TextBlock>
            <ItemsControl Margin="10" ItemsSource="{Binding Branches}" ItemTemplate="{StaticResource BranchTemplate}"/>
        </StackPanel>
        <!-- 分岐のリスト画面 -->
        <!-- CreateBranchWindowVMにBindされる -->
        <!-- 選択された画面はEditingBranchにBindされる -->
        <StackPanel Grid.Row="1">
            <!-- 条件設定画面のボーダー -->
            <Border Visibility="{Binding IsEditingBranch, Converter={StaticResource TrueToVisibleConverter}}"
                    BorderThickness="1,1,1,1" BorderBrush="LightGray" Margin="4" Padding="4"
                    >
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <!-- IF/ELSE IF/ ELSEなどのラベル -->
                    <TextBlock Grid.Row="0" Grid.ColumnSpan="2" Text="{Binding  EditingBranch.TypeName}" Margin="8,8,0,0"
                               Visibility="{Binding EditingBranch.CanChangeType, Converter={StaticResource FalseToVisibleConverter}}"
                               />
                    
                    <!-- 新規追加の場合に限り ELSE IF / ELSEは編集可能 -->
                    <ComboBox Margin="8,8,0,0" Width="80" ItemsSource="{Binding EditingBranch.ChangeableTypes}"                                   
                              DisplayMemberPath="Label" 
                              SelectedValuePath="Code" 
                              SelectedValue="{Binding EditingBranch.TypeCode}"
                              HorizontalAlignment="Left"
                              Visibility="{Binding EditingBranch.CanChangeType, Converter={StaticResource TrueToVisibleConverter}}"
                              />
                    <!--条件本体(CondGroupVMのリスト) -->
                    <ItemsControl Name="condGroupControl" Grid.Row="1" Grid.ColumnSpan="2" Margin="4" ItemsSource="{Binding EditingBranch.CondGroups}" ItemTemplate="{StaticResource CondGroupTemplate}" VerticalAlignment="Top"/>
                    <!--最下行はTHEN+質問リストのコンボ -->                    
                    <StackPanel Grid.Row="2" Grid.Column="0"  Orientation="Horizontal" Margin="10,0,0,0">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock VerticalAlignment="Center" Margin="0,0,10,1"
                                   Visibility="{Binding EditingBranch.IsTypeElse, Converter={StaticResource FalseToVisibleConverter}}"
                                   >THEN</TextBlock>
                            <ComboBox Grid.Column="0" Margin="4" Width="70" 
                                      ItemsSource="{Binding ThenConstructs}" DisplayMemberPath="No" 
                                      IsEditable="True"
                                      Text="{Binding EditingBranch.ThenConstructNo, UpdateSourceTrigger=LostFocus, ValidatesOnDataErrors=True}"/>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal">
                        <Button Grid.Row="2" Grid.Column="1" Margin="4" Width="70" Command="{Binding EditingBranch.SubmitCommand}">OK</Button>
                        <Button Grid.Row="2" Grid.Column="1" Margin="4" Width="70" Command="{Binding EditingBranch.CancelCommand}" Content="{Loc Key= Cancel}"></Button>
                    </StackPanel>
                </Grid>
            </Border>
        </StackPanel>
        <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Width="80" Margin="4" Click="okButton_Clicked">OK</Button>
            <Button Width="80" Margin="4" Click="cancelButton_Clicked" Content="{Loc Key= Cancel}"></Button>
        </StackPanel>        
    </Grid>
</Window>
