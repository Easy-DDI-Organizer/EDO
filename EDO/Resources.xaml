<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:view="clr-namespace:EDO.Core.View"                           
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    x:Class="EDO.EDOResourceDictionary"
                    x:ClassModifier="public"
                    >
    <!-- アイコンの定義 -->
    <BitmapImage x:Key="LargeCopyIcon" UriSource="Images\Large\page_white_copy.png"/>
    <BitmapImage x:Key="LargeSaveIcon" UriSource="Images\Large\disk.png"/>
    <BitmapImage x:Key="LargeSaveAsIcon" UriSource="Images\Large\save_as.png"/>
    <BitmapImage x:Key="LargeNewIcon" UriSource="Images\Large\page_white.png"/>
    <BitmapImage x:Key="LargeAddIcon" UriSource="Images\Large\page_white_add.png"/>
    <BitmapImage x:Key="LargeDeleteIcon" UriSource="Images\Large\page_white_delete.png"/>
    <BitmapImage x:Key="LargeExportIcon" UriSource="Images\Large\page_white_go.png"/>
    <BitmapImage x:Key="LargeExitIcon" UriSource="Images\Large\door_out.png"/>
    <BitmapImage x:Key="LargeConfigIcon" UriSource="Images\Large\cog.png"/>
    <BitmapImage x:Key="LargeOpenIcon" UriSource="Images\Large\folder.png"/>
    <BitmapImage x:Key="LargeUndoIcon" UriSource="Images\Large\arrow_rotate_anticlockwise.png"/>
    <BitmapImage x:Key="LargeRedoIcon" UriSource="Images\Large\arrow_rotate_clockwise.png"/>
    <BitmapImage x:Key="LargeNewStudyUnitIcon" UriSource="Images\Large\page_white.png"/>
    <BitmapImage x:Key="LargeAddStudyUnitIcon" UriSource="Images\Large\page_white_add.png"/>
    <BitmapImage x:Key="LargeAddGroupIcon" UriSource="Images\Large\document_copies.png"/>
    <BitmapImage x:Key="LargeImportIcon" UriSource="Images\Large\page_white_get.png"/>
    <BitmapImage x:Key="LargeExportQuestionnaireIcon" UriSource="Images\Large\page_white_edit.png"/>
    <BitmapImage x:Key="LargeExportCodebookIcon" UriSource="Images\Large\page_edit.png"/>
    <BitmapImage x:Key="LargeExportSetupSyntaxIcon" UriSource="Images\Large\layout_edit.png"/>
    <BitmapImage x:Key="LargeImportSpssIcon" UriSource="Images\Large\data_table.png"/>

    <BitmapImage x:Key="SmallHelpIcon" UriSource="Images\Small\help.png"/>
    <BitmapImage x:Key="SmallFileMenuIcon" UriSource="Images\Small\page_white.png"/>
    <BitmapImage x:Key="SmallFolderIcon" UriSource="Images\Small\folder.png"/>
    <BitmapImage x:Key="SmallFileIcon" UriSource="Images\Small\page_white.png"/>
    <BitmapImage x:Key="SmallNewStudyUnitIcon" UriSource="Images\Small\page_white.png"/>
    <BitmapImage x:Key="SmallAddStudyUnitIcon" UriSource="Images\Small\page_white_add.png"/>
    <BitmapImage x:Key="SmallAddGroupIcon" UriSource="Images\Small\document_copies.png"/>
    <BitmapImage x:Key="SmallUndoIcon" UriSource="Images\Small\arrow_undo.png"/>
    <BitmapImage x:Key="SmallRedoIcon" UriSource="Images\Small\arrow_redo.png"/>
    <BitmapImage x:Key="SmallExitIcon" UriSource="Images\Small\door_out.png"/>
    <BitmapImage x:Key="SmallConfigIcon" UriSource="Images\Small\cog.png"/>
    <BitmapImage x:Key="SmallUpIcon" UriSource="Images\Small\arrow_up.png"/>
    <BitmapImage x:Key="SmallDownIcon" UriSource="Images\Small\arrow_down.png"/>
    <BitmapImage x:Key="SmallAddIcon" UriSource="Images\Small\add.png"/>
    <BitmapImage x:Key="SmallDeleteIcon" UriSource="Images\Small\delete.png"/>
    <BitmapImage x:Key="SmallEditIcon" UriSource="Images\Small\pencil.png"/>

    <!-- システムカラーの定義 -->
    
    <SolidColorBrush x:Key="EDOBackground" Color="{x:Static SystemColors.ControlColor}"/>

    <Style x:Key="Flat">
        <Setter Property="Control.Background" Value="Transparent" />
        <Setter Property="Control.BorderBrush" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="Control.IsMouseOver" Value="True">
                <Setter Property="Control.Background" Value="{x:Null}" />
                <Setter Property="Control.BorderBrush" Value="{x:Null}" />
                <Setter Property="Control.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="Control.IsFocused" Value="True">
                <Setter Property="Control.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="Control.IsEnabled" Value="False">
                <Setter Property="Control.Opacity" Value="0.4"/>
                <Setter Property="Control.BorderBrush" Value="Transparent" />
                <Setter Property="Control.BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="LeftBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="10,10,0,10" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{StaticResource EDOBackground}"/>
        <Setter Property="Background" Value="{StaticResource EDOBackground}"/>
    </Style>

    <Style x:Key="LeftPaneStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="{StaticResource EDOBackground}"/>
    </Style>

    <Style x:Key="RightBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,10,10,10" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderBrush" Value="{StaticResource EDOBackground}"/>
        <Setter Property="Background" Value="{StaticResource EDOBackground}"/>
    </Style>

    <Style x:Key="RightPaneStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource EDOBackground}"/>
        <Setter Property="ShowsPreview" Value="True"/>
    </Style>
    
    <Style x:Key="UserControlStyle" TargetType="{x:Type UserControl}">
        <Setter Property="Margin" Value="00"/>
    </Style>
    
    <Style x:Key="TabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="Padding" Value="10" />
        <Setter Property="Background" Value="{StaticResource EDOBackground}"/>
    </Style>

    <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Margin" Value="4"/>
        <Setter Property="Padding" Value="6" />
     </Style>

    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="4"/>
    </Style>
    
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Height" Value="50"/>
    </Style>

    <Style x:Key="TopHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Margin" Value="0,4,0,0" />
    </Style>

    <Style x:Key="TextRowStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Margin" Value="0,4,4,0" />
    </Style>

    <Style x:Key="GridRowStyle" TargetType="{x:Type FrameworkElement}">
        <Setter Property="Margin" Value="0,4,4,0" />
    </Style>
    
    <view:DateRangeConverter x:Key="dateRangeConverter" />
    <view:DecimalValueConverter x:Key="decimalValueConverter" />
    <view:EnumBooleanConverter x:Key="enumBooleanConverter" />
    <view:ObjectBooleanConverter x:Key="objectBooleanConverter" />
    <view:ExpandedToGridLengthConverter  x:Key="expandedToGridLengthConverter" />
    
    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
    <view:BooleanToVisibilityConverterEx x:Key="TrueToVisibleConverter" />
    <view:BooleanToVisibilityConverterEx x:Key="FalseToVisibleConverter" Reverse="True"/>

    <Style x:Key="MultiLineTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SingleLineTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Self}, 
                       Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StatusMessageStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsErrorMessage}" Value="True">
                <Setter Property="Foreground" Value="Red"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsErrorMessage}" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <ControlTemplate x:Key="DataGridRowErrorTemplate">
        <Grid Margin="0,-2,0,-2"
            ToolTip="{Binding RelativeSource={RelativeSource
            FindAncestor, AncestorType={x:Type DataGridRow}},Path=(Validation.Errors)[0].ErrorContent}">
            <Ellipse StrokeThickness="0" Fill="Red" 
              Width="{TemplateBinding FontSize}" 
              Height="{TemplateBinding FontSize}" />
            <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" 
              FontWeight="Bold" Foreground="White" 
              HorizontalAlignment="Center" Margin="0,7,0,0" />
        </Grid>
    </ControlTemplate>

    <Grid x:Key="dataGridHelp" x:Shared="false">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <TextBlock Grid.Row="0" Grid.Column="0" Margin="2,0,2,0" Text="{Loc F2AndDoubleClick}"></TextBlock>
        <TextBlock Grid.Row="0" Grid.Column="1" Margin="2,0,2,0" Text="{Loc StartEdit}"></TextBlock>
        <TextBlock Grid.Row="1" Grid.Column="0" Margin="2,0,2,0">Esc</TextBlock>
        <TextBlock Grid.Row="1" Grid.Column="1" Margin="2,0,2,0" Text="{Loc CancelEdit}"></TextBlock>
        <TextBlock Grid.Row="2" Grid.Column="0" Margin="2,0,2,0">Enter</TextBlock>
        <TextBlock Grid.Row="2" Grid.Column="1" Margin="2,0,2,0" Text="{Loc Confirm}"></TextBlock>
    </Grid>
    
    
    
    <Style TargetType="DataGrid">
        <Setter Property="RowHeaderWidth" Value="20"/>
        <Setter Property="RowValidationErrorTemplate" Value="{StaticResource DataGridRowErrorTemplate}"/>

                    <!-- Make the border and grid lines a little less imposing -->
        <Setter Property="BorderBrush" Value="#DDDDDD" />
        <Setter Property="HorizontalGridLinesBrush" Value="#DDDDDD" />
        <Setter Property="VerticalGridLinesBrush" Value="#DDDDDD" />
        
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Setter Property="MinHeight" Value="34"/>
                    <Style.Triggers>
                        <!-- Highlight a grid row as the mouse passes over -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="AliceBlue" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="Red"/>
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="False">
                            <Setter Property="ToolTip" Value="{StaticResource dataGridHelp}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Style.Triggers>
                        <!-- Highlight selected rows -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#1ca0f2" />
                            <Setter Property="BorderBrush" Value="#1ca0f2" />
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="ToolTip" Value="{x:Null}"/>
                        </Trigger>
                        <Trigger Property="DataGridRow.IsFocused" Value="True">
                            <Setter Property="Background" Value="#76c6f7" />
                        </Trigger>
                    </Style.Triggers>
                    <!-- Add some padding around the contents of a cell -->
                    <!--
                    <Setter Property="Padding" Value="4,3,4,3" />
                    -->
                    <Setter Property="Padding" Value="4,3,3,6" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="DataGridCell">
                                <Border Padding="{TemplateBinding Padding}" 
                                Background="{TemplateBinding Background}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        
        
    </Style>


    <Style TargetType="view:DataGridEx" BasedOn="{StaticResource {x:Type DataGrid}}">
    </Style>

    <ControlTemplate x:Key="TabControlTemplate" TargetType="TabControl">
        <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="ColumnDefinition0"/>
                <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                <RowDefinition x:Name="RowDefinition1" Height="*"/>
            </Grid.RowDefinitions>
            <Grid Panel.ZIndex="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TabPanel Margin="2,2,2,0" x:Name="HeaderPanel" IsItemsHost="true" KeyboardNavigation.TabIndex="1" VerticalAlignment="Bottom"/>
                <StackPanel Grid.Column="1" Orientation="Horizontal">
                    <Button Width="60" Height="24" Margin="2,0,2,4" Command="{Binding AddCommand}" Content="{Loc Key=Add}"></Button>
                    <Button Width="60" Height="24" Margin="2,0,2,4"  Command="{Binding RemoveCommand}" Content="{Loc Key=Delete}"></Button>
                </StackPanel>
            </Grid>
            <Border x:Name="ContentPanel" Grid.Column="0" Grid.Row="1" BorderBrush="#D0CEBF" BorderThickness="0,0,1,1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                    <Border Padding="10">
                        <ContentPresenter x:Name="PART_SelectedContentHost"
                              Margin="4" 
                              ContentSource="SelectedContent" />
                    </Border>
                </Border>
            </Border>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="BookTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0 " Orientation="Horizontal">
                <Button Margin="4" Command="{Binding SelectBookCommand}" Content="{Loc Key=SelectFromExistBook}"></Button>
                <Button Margin="4" Command="{Binding AddBookCommand}" Content="{Loc Key=AddBook}"></Button>
                <Button Margin="4" Command="{Binding EditBookCommand}" Content="{Loc Key=EditBook}"></Button>
                <Button Margin="4" Command="{Binding RemoveBookCommand}" Content="{Loc Key=DeleteBook}"></Button>
            </StackPanel>
            <DataGrid Grid.Row="1" Name="bookDataGrid" Grid.ColumnSpan="2" AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      IsReadOnly="True"
                      ItemsSource="{Binding Path=Books}" 
                      IsSynchronizedWithCurrentItem="True"
                      SelectedItem="{Binding SelectedBookItem}"
                      MouseDoubleClick="bookDataGrid_MouseDoubleClick"
                      >
                <DataGrid.InputBindings>
                    <KeyBinding Gesture="DELETE" Command="{Binding RemoveBookCommand}"/>
                </DataGrid.InputBindings>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="{Loc Key=Author}" Width="25*" Binding="{Binding Author}"></DataGridTextColumn>
                    <DataGridTextColumn Header="{Loc Key=Title}" Width="25*" Binding="{Binding Title}"></DataGridTextColumn>
                    <DataGridTextColumn Header="{Loc Key=AnnouncementDate}" Width="25*" Binding="{Binding AnnouncementDate}"></DataGridTextColumn>
                    <DataGridTextColumn Header="{Loc Key=RelatedMetaData}" Width="25*" Binding="{Binding RelationCount}"></DataGridTextColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="BookTemplate2">
        <Button>Test2</Button>
    </ControlTemplate>
    <!--    
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border 
            Name="Border"
            Margin="0,0,-4,0" 
            Background="{StaticResource LightBrush}"
            BorderBrush="Gray" 
            BorderThickness="1,1,1,1" 
            CornerRadius="2,12,0,0" >
                            <ContentPresenter x:Name="ContentSite"
              VerticalAlignment="Center"
              HorizontalAlignment="Center"
              ContentSource="Header"
              Margin="12,2,12,2"
              RecognizesAccessKey="True"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="Gray" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="Gray" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray" />
                            <Setter Property="Foreground" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
-->
    <!-- 回答方法のDataTemplate -->
    <!-- 回答方法名のTextBoxのBindingでPropertyChangedを使っていないのは、空白ならばデフォルトのタイトル名を設定する処理が文字列を全部削除した際に自動で走るのを防ぐため -->
    <DataTemplate x:Key="ChoicesResponse">
        <TabControl Style="{StaticResource TabControlStyle}" SelectedIndex="{Binding SelectedIndex}">
            <TabItem Header="{Binding Header}">
                <Grid>
                    <Grid.Resources>
                        <FrameworkElement x:Key="ProxyElement" DataContext="{Binding}"/>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <!--GridPanelにしたいところだけどそうするとボタンが右寄せになってしまう-->
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Text="{Loc Key= ResponseName}"></TextBlock>
                        <TextBox IsEnabled="True" Width="200" Text="{Binding Title}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                        <Button Style="{StaticResource GridRowStyle}" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.SelectResponseCommand}" Content="{Loc Key= SelectRegisteredResponse}"></Button>
                        <ContentControl Visibility="Collapsed" Content="{StaticResource ProxyElement}"/>
                    </StackPanel>
                    <DataGrid Name="codeDataGrid" Grid.Row="1" Margin="0,4,0,0" ItemsSource="{Binding Codes}" AutoGenerateColumns="False"
                          CanUserDeleteRows="False"
                          >
                        <!--
                          view:DataGridRollbackOnDataContextChangedBehaviour.DataGridRollbackOnDataContextChanged="True"     
                          view:DataGridRollbackOnUnfocusedBehaviour.DataGridRollbackOnUnfocused="True"      
                    -->
                        <DataGrid.RowValidationRules>
                            <view:RowDataInfoValidationRule ValidationStep="UpdatedValue"/>
                        </DataGrid.RowValidationRules>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{Loc Key= CodeNumber}" Binding="{Binding Value}" Width="100"/>
                            <DataGridTextColumn Header="{Loc Key= BranchSentence}" Binding="{Binding Label}" Width="*"/>
                            <DataGridCheckBoxColumn Header="{Loc Key=MissingValue}" Binding="{Binding IsMissingValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="CheckBox">
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                            <DataGridCheckBoxColumn Header="{Loc Key=ExcludeToQuestionnaire}" Binding="{Binding IsExcludeValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding DataContext.IsQuestionDesignMode, Source={StaticResource ProxyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                                                >
                                <DataGridCheckBoxColumn.ElementStyle>
                                    <Style TargetType="CheckBox">
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                    </Style>
                                </DataGridCheckBoxColumn.ElementStyle>
                            </DataGridCheckBoxColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=ResponseAreaLayoutEtc}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}">
                <Grid DataContext="{Binding Layout}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <GroupBox Header="{Loc Key=MeasurementMethod}" Margin="4">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <RadioButton Grid.Row="0" Margin="2" Content="{Loc Key=SingleResponse}"
                                         IsChecked="{Binding Path=MeasurementMethod, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Single}"
                                         />
                            <RadioButton Name="multipleRadio" Grid.Row="1" Margin="2" Content="{Loc Key=MultipleResponse}"
                                         IsChecked="{Binding Path=MeasurementMethod, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Multiple}"
                                         />
                            <StackPanel Grid.Row="2" Margin="20,2,0,2" Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=MaxResponseCount}"/>
                                <TextBox Width="80" Text="{Binding MaxSelectionCount, ValidatesOnDataErrors=True,TargetNullValue=''}" IsEnabled="{Binding ElementName=multipleRadio, Path=IsChecked}" Tag="Undoable"/>
                            </StackPanel>
                            <RadioButton Grid.Row="3" Margin="2" Content="{Loc Key=SDMethod}"
                                         IsChecked="{Binding Path=MeasurementMethod, Converter={StaticResource enumBooleanConverter}, ConverterParameter=SD}"
                                         />
                        </Grid>
                    </GroupBox>
                    <GroupBox Grid.Column="1" Header="{Loc Key=ResponseAreaLayout}" Margin="4">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <CheckBox Grid.Row="0" Grid.ColumnSpan="2" Margin="2" Content="{Loc Key=SurroundChoices}" IsChecked="{Binding Surround}"/>
                            <TextBlock Grid.Row="1" Grid.ColumnSpan="2" Margin="2" Text="{Loc Key=ChoicesOrder}"/>
                            <StackPanel Grid.Row="2" Orientation="Horizontal" Margin="20,2,0,2">
                                <RadioButton Margin="2" Content="{Loc Key=Vertical}" IsChecked="{Binding Path=Direction, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Vertical}"/>
                                <RadioButton Margin="2" Content="{Loc Key=Horizontal}" IsChecked="{Binding Path=Direction, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Horizontal}"/>
                            </StackPanel>
                            <StackPanel Grid.Row="3" Orientation="Horizontal" Margin="20,2,0,2">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=ColumnCount}"/>
                                <TextBox Width="80" Text="{Binding ColumnCount, ValidatesOnDataErrors=True,TargetNullValue=''}" Tag="Undoable"/>
                            </StackPanel>
                        </Grid>
                    </GroupBox>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=RelatedBook}">
                <ContentControl Template="{StaticResource BookTemplate}"/>
            </TabItem>
        </TabControl>
    </DataTemplate>
    <DataTemplate x:Key="DateTimeResponse">
        <TabControl Style="{StaticResource TabControlStyle}" SelectedIndex="{Binding SelectedIndex}">
            <TabItem Header="{Binding Header}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Text="{Loc Key= ResponseName}"></TextBlock>
                        <TextBox IsEnabled="True" Width="200" Text="{Binding Title}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                        <Button Style="{StaticResource GridRowStyle}" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.SelectResponseCommand}" Content="{Loc Key= SelectRegisteredResponse}"></Button>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Row="0"  Style="{StaticResource GridRowStyle}" Text="{Loc Key= DateType}"></TextBlock>
                        <ComboBox Grid.Row="1" ItemsSource="{Binding DetailTypes}" 
                                  DisplayMemberPath="Label" 
                                  SelectedValuePath="Code" 
                                  SelectedValue="{Binding DetailTypeCode, UpdateSourceTrigger=PropertyChanged}" 
                                  Style="{StaticResource GridRowStyle}"
                          ></ComboBox>
                    </Grid>
                    <TextBlock Grid.Row="2" Style="{StaticResource GridRowStyle}" Text="{Loc Key=ConfigMissingValue}"></TextBlock>
                    <DataGrid Grid.Row="3" Name="missingValueDataGrid" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ItemsSource="{Binding MissingValues}" 
                          AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" IsSynchronizedWithCurrentItem="True" CanUserAddRows="True"
                          SelectedItem="{Binding SelectedMissingValueItem}"
                          >
                        <DataGrid.InputBindings>
                            <KeyBinding Gesture="DELETE" Command="{Binding RemoveMissingValueCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{Loc Key=MissingValue}" Width="*" Binding="{Binding Content}"/>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="{Loc Key=Delete}" Command="{Binding RemoveMissingValueCommand}"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                        <DataGrid.RowValidationRules>
                            <view:RowDataInfoValidationRule ValidationStep="UpdatedValue"/>
                        </DataGrid.RowValidationRules>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=ResponseAreaLayoutEtc}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" >
                <Grid DataContext="{Binding Layout}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <GroupBox Header="{Loc Key=CalendarEra}" Margin="4">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <RadioButton Grid.Row="0" Margin="2" Content="{Loc Key=JapaneseEra}" IsChecked="{Binding Path=CalendarEra, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Japanese}"/>
                            <RadioButton Grid.Row="1" Margin="2" Content="{Loc Key=WesternEra}" IsChecked="{Binding Path=CalendarEra, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Western}"/>
                            <RadioButton Grid.Row="2" Margin="2" Content="{Loc Key=Nothing}" IsChecked="{Binding Path=CalendarEra, Converter={StaticResource enumBooleanConverter}, ConverterParameter=None}"/>
                        </Grid>
                    </GroupBox>
                    <GroupBox Grid.Column="1" Header="{Loc Key=ResponseAreaLayout}" Margin="4">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <RadioButton Grid.Row="0" Margin="2" Content="{Loc Key=Underline}" IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Underline}"/>
                            <RadioButton Grid.Row="1" Margin="2" Content="{Loc Key=Textbox}" IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Textbox}"/>
                            <RadioButton Grid.Row="2" Margin="2" Content="{Loc Key=Box}" IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Box}"/>
                        </Grid>
                    </GroupBox>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=RelatedBook}">
                <ContentControl Template="{StaticResource BookTemplate}"/>
            </TabItem>
        </TabControl>
    </DataTemplate>
    <DataTemplate x:Key="FreeResponse">
        <TabControl Style="{StaticResource TabControlStyle}" SelectedIndex="{Binding SelectedIndex}">
            <TabItem Header="{Binding Header}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Text="{Loc Key= ResponseName}"></TextBlock>
                        <TextBox IsEnabled="True" Width="200" Text="{Binding Title}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                        <Button Style="{StaticResource GridRowStyle}" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.SelectResponseCommand}" Content="{Loc Key= SelectRegisteredResponse}"></Button>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100" />
                            <ColumnDefinition Width="100" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Row="0" Grid.Column="0" Style="{StaticResource GridRowStyle}" Text="{Loc Key= MinCharacterCount}"></TextBlock>
                        <TextBlock Grid.Row="0" Grid.Column="1" Style="{StaticResource GridRowStyle}" Text="{Loc Key= MaxCharacterCount}"></TextBlock>
                        <TextBox Grid.Row="1" Grid.Column="0" Text="{Binding Min, ValidatesOnDataErrors=True}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Max, ValidatesOnDataErrors=True}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                    </Grid>
                    <TextBlock Grid.Row="2" Style="{StaticResource GridRowStyle}" Text="{Loc Key=ConfigMissingValue}"></TextBlock>
                    <DataGrid Grid.Row="3" Name="missingValueDataGrid" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ItemsSource="{Binding MissingValues}" 
                          AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" IsSynchronizedWithCurrentItem="True" CanUserAddRows="True"
                          SelectedItem="{Binding SelectedMissingValueItem}"
                          >
                        <DataGrid.InputBindings>
                            <KeyBinding Gesture="DELETE" Command="{Binding RemoveMissingValueCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{Loc Key=MissingValue}" Width="*" Binding="{Binding Content}"/>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="{Loc Key=Delete}" Command="{Binding RemoveMissingValueCommand}"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                        <DataGrid.RowValidationRules>
                            <view:RowDataInfoValidationRule ValidationStep="UpdatedValue"/>
                        </DataGrid.RowValidationRules>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=ResponseAreaLayoutEtc}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" >
                <Grid DataContext="{Binding Layout}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <GroupBox Header="{Loc Key=ResponseAreaLayout}" Margin="4">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <RadioButton Grid.Row="0" Margin="2" Content="{Loc Key=Underline}" IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Underline}"/>
                            <RadioButton Grid.Row="1" Margin="2" Content="{Loc Key=Textbox}" IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Textbox}"/>
                            <RadioButton Grid.Row="2" Margin="2" Content="{Loc Key=Box}" IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Box}"/>
                            <StackPanel Grid.Row="3" Orientation="Horizontal" Margin="2,2,0,2">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=RowCount}"/>
                                <TextBox Width="80" Text="{Binding RowCount, ValidatesOnDataErrors=True,TargetNullValue=''}" Tag="Undoable"/>
                            </StackPanel>
                            <StackPanel Grid.Row="4" Orientation="Horizontal" Margin="2,2,0,2">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=ColumnCount}"/>
                                <TextBox Width="80" Text="{Binding ColumnCount, ValidatesOnDataErrors=True,TargetNullValue=''}" Tag="Undoable"/>
                            </StackPanel>
                        </Grid>
                    </GroupBox>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=RelatedBook}">
                <ContentControl Template="{StaticResource BookTemplate}"/>
            </TabItem>
        </TabControl>          
    </DataTemplate>
    <DataTemplate x:Key="NumberResponse">
        <TabControl Style="{StaticResource TabControlStyle}" SelectedIndex="{Binding SelectedIndex}">
            <TabItem Header="{Binding Header}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Text="{Loc Key= ResponseName}"></TextBlock>
                        <TextBox IsEnabled="True" Width="200" Text="{Binding Title}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                        <Button Style="{StaticResource GridRowStyle}" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.SelectResponseCommand}" Content="{Loc Key= SelectRegisteredResponse}"></Button>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="100" />
                            <ColumnDefinition Width="100" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Row="0" Grid.Column="0" Style="{StaticResource GridRowStyle}" Text="{Loc Key= NumberType}"></TextBlock>
                        <TextBlock Grid.Row="0" Grid.Column="1" Style="{StaticResource GridRowStyle}" Text="{Loc Key= MinNumber}"></TextBlock>
                        <TextBlock Grid.Row="0" Grid.Column="2" Style="{StaticResource GridRowStyle}" Text="{Loc Key= MaxNumber}"></TextBlock>
                        <ComboBox Grid.Row="1" ItemsSource="{Binding DetailTypes}" 
                                  DisplayMemberPath="Label" 
                                  SelectedValuePath="Code" 
                                  SelectedValue="{Binding DetailTypeCode, UpdateSourceTrigger=PropertyChanged}" 
                                  Style="{StaticResource GridRowStyle}"
                          ></ComboBox>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding Min, ValidatesOnDataErrors=True}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                        <TextBox Grid.Row="1" Grid.Column="2" Text="{Binding Max, ValidatesOnDataErrors=True}" Style="{StaticResource GridRowStyle}" Tag="Undoable"></TextBox>
                    </Grid>
                    <TextBlock Grid.Row="2" Style="{StaticResource GridRowStyle}" Text="{Loc Key=ConfigMissingValue}"></TextBlock>
                    <DataGrid Grid.Row="3" Name="missingValueDataGrid" Width="Auto" Height="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ItemsSource="{Binding MissingValues}" 
                          AutoGenerateColumns="False" VerticalScrollBarVisibility="Auto" IsSynchronizedWithCurrentItem="True" CanUserAddRows="True"
                          SelectedItem="{Binding SelectedMissingValueItem}"
                          >
                        <DataGrid.InputBindings>
                            <KeyBinding Gesture="DELETE" Command="{Binding RemoveMissingValueCommand}"/>
                        </DataGrid.InputBindings>
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{Loc Key=MissingValue}" Width="*" Binding="{Binding Content}"/>
                        </DataGrid.Columns>
                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="{Loc Key=Delete}" Command="{Binding RemoveMissingValueCommand}"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                        <DataGrid.RowValidationRules>
                            <view:RowDataInfoValidationRule ValidationStep="UpdatedValue"/>
                        </DataGrid.RowValidationRules>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="{Loc Key=ResponseAreaLayoutEtc}" Visibility="{Binding IsQuestionDesignMode, Converter={StaticResource booleanToVisibilityConverter}}" >
                <Grid DataContext="{Binding Layout}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <GroupBox Header="{Loc Key=MeasurementMethod}" Margin="4">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <RadioButton Name="numberRadio" Grid.Row="0" Margin="2" Content="{Loc Key=WriteNumber}" 
                                         IsChecked="{Binding Path=MeasurementMethod, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Number}"/>
                            <StackPanel Grid.Row="1" Margin="20,2,0,2" Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=Unit}" Width="130"/>
                                <TextBox Width="80" Text="{Binding Unit, ValidatesOnDataErrors=True}" IsEnabled="{Binding ElementName=numberRadio, Path=IsChecked}"/>
                            </StackPanel>
                            <StackPanel Grid.Row="2" Margin="20,2,0,2" Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=ResponseAreaLayout}" Width="130"/>
                                <RadioButton Grid.Row="0" Margin="2" Content="{Loc Key=Underline}" 
                                             IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Underline}"
                                             IsEnabled="{Binding ElementName=numberRadio, Path=IsChecked}"
                                             />
                                <RadioButton Grid.Row="1" Margin="2" Content="{Loc Key=Textbox}" 
                                             IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Textbox}"
                                             IsEnabled="{Binding ElementName=numberRadio, Path=IsChecked}"
                                             />
                                <RadioButton Grid.Row="2" Margin="2" Content="{Loc Key=Box}"
                                             IsChecked="{Binding Path=Style, Converter={StaticResource enumBooleanConverter}, ConverterParameter=Box}"
                                             IsEnabled="{Binding ElementName=numberRadio, Path=IsChecked}"
                                             />
                            </StackPanel>
                            <RadioButton Name="vasRadio" Grid.Row="3" Margin="2" Content="Visual Analog Scale" 
                                         IsChecked="{Binding Path=MeasurementMethod, Converter={StaticResource enumBooleanConverter}, ConverterParameter=VisualAnalogScale}"/>
                            <StackPanel Grid.Row="4" Margin="20,2,0,2" Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=WordBothEnd}" Width="130"/>
                                <TextBox Width="160" Text="{Binding LeftStatement, ValidatesOnDataErrors=True}" IsEnabled="{Binding ElementName=vasRadio, Path=IsChecked}" Tag="Undoable"/>
                                <TextBox Width="160" Text="{Binding RightStatement, ValidatesOnDataErrors=True}" IsEnabled="{Binding ElementName=vasRadio, Path=IsChecked}" Tag="Undoable" Margin="4,0,0,0"/>
                            </StackPanel>
                            <StackPanel Grid.Row="5" Margin="20,2,0,2" Orientation="Horizontal">
                                <TextBlock VerticalAlignment="Center" Margin="0,2,2,2" Text="{Loc Key=LineLength}" Width="130"/>
                                <TextBox Width="80" Text="{Binding Length, ValidatesOnDataErrors=True,TargetNullValue=''}" IsEnabled="{Binding ElementName=vasRadio, Path=IsChecked}" Tag="Undoable"/>
                            </StackPanel>
                        </Grid>
                    </GroupBox>
                </Grid>                
            </TabItem>
            <TabItem Header="{Loc Key=RelatedBook}">
                <ContentControl Template="{StaticResource BookTemplate}"/>
            </TabItem>
        </TabControl>
    </DataTemplate>
    <DataTemplate x:Key="UnknownResponse">
    </DataTemplate>    
</ResourceDictionary>